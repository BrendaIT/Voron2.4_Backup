############################ ERCF ##########################
#[gcode_macro ERCF_OFF]
#gcode:
#    ERCF_DISABLE

#[gcode_macro ERCF_ON]
#gcode:
#    ERCF_ENABLE

######################### MISC #########################

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
	#Parameters
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+5}

##M109 GAB 3d
#Set extruder temperature and wait

#[gcode_macro M109]
#rename_existing: M109.1
#gcode:
#  {% if printer["gcode_macro status_heating"] != null %}
#    status_heating
#  {% endif %}
#    M109.1 { rawparams }
#  {% if printer["gcode_macro status_ready"] != null %}
#    status_ready
#  {% endif %}

######################### TESTING #########################

# Dump all Klipper parameters to terminal, helps find names and values of variables for use in macros
# I did not write this.


[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}


[gcode_macro test]
gcode:
	{action_respond_info(printer.gcode_move.position.z|string)}
	
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == false %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

##-------------------------------------------------------------
[gcode_macro START_GCODE]
gcode:
  {% set svv = printer.save_variables.variables %}
  ACTIVATE_EXTRUDER extruder={svv.currentextruder}
  
#--------------------------------------

[gcode_macro SLEEP]
#default_parameter_MS: 300000 ; pause duration in ms
gcode:
    {% set MS = params.MS|default(300000)|int %}
    G4 P{MS}
#------------------------------------------

[gcode_macro PRE_HOT_BED]
gcode:
    G28
    G0 X300 Y10 Z200
    M190 S110
    G4 P480000
    M300 S100 P1000
    M300 S120 P1000
    M300 S140 P1000
    M300 S150 P100
    M300 S150 P100
    
##----------------------------------------------------------
[gcode_macro PID_BED]
gcode:
    G28
    G0 X300 Y20 Z200
    PID_CALIBRATE HEATER=heater_bed TARGET=105 WRITE_FILE=1
##-----------------------------------------------------
[gcode_macro PID_HOTEND]
gcode:
    G28
    G0 X175 Y175 Z10
    M106 S153  #77
    PID_CALIBRATE HEATER=extruder TARGET=245 WRITE_FILE=1
    M107
##----------------------------------------------------------


################ POWER ###########################################


#############################################################################################

## Reset SD File after Print_END or CANCEL_PRINT
## This will avoid the reprint option in Mainsail after a print is done
[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE

##  action_respond_info will be always executed at the beginning of an macro evaluation.
##  Use _PRINT_AR if you need the order of several console outputs in the order given by the macro
##  Use: _PRINT_AR T="QGL forced by PRINT_START"
[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}

[gcode_macro M115]
description: Print host and mcu version
rename_existing: M115.1
gcode:
  {% set out = ['mcu build version:'] %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% if name2 is in ['mcu_version'] %}
        {% set _dummy = out.append("%s: %s" % (name1, printer[name1][name2])) %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(out|join("\n"))}
  M115.1

[gcode_macro _bot_data]
variable_lapse_video_size: 0
variable_lapse_filename: 'None'
variable_lapse_path: 'None'
gcode:
    M118 Setting bot lapse variables

[gcode_macro timelapse]
gcode:
   RESPOND PREFIX=timelapse MSG=photo

[gcode_macro timelapse_after]
gcode:
  {% set P = params.PATH|default(lala) %}
   RESPOND PREFIX=lala MSG={ P }
   RESPOND PREFIX=lala_raw MSG={ rawparams }


[gcode_macro x_y_accuracy]
gcode:
    {% set speedyspeed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    
    {% if not 'xy' in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}
    GET_POSITION
    { action_respond_info("first results above") }
    G28 X
    G91
    G0 X-60 F{ (speedyspeed * 60) / 3 }
    G90
    G28 X
    { action_respond_info("second results below") }
    GET_POSITION


[gcode_macro update_display]
gcode:
   {% if printer['temperature_sensor chamber'] != null %}
      M117 Chamber Temp: {printer['temperature_sensor chamber'].temperature}
   {% else %}
      { action_respond_info("No 'chamber' sensor found") }
   {% endif %}


[gcode_macro TMC_DEBUG]
gcode:
    DUMP_TMC STEPPER=extruder
    DUMP_TMC STEPPER=stepper_x
    DUMP_TMC STEPPER=stepper_Y
    DUMP_TMC STEPPER=stepper_z
    DUMP_TMC STEPPER=stepper_z1
    DUMP_TMC STEPPER=stepper_z2
    DUMP_TMC STEPPER=stepper_z3

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro TEST_SPEED_Z]
description: Checking if the existing z speed config will skip
variable_margin: 50 # test movement this far away from z boundaries
variable_iterations: 10 
gcode:
  {% set cfg = printer.configfile.config %}
  {% set th = printer.toolhead %}
  {% set max_v = cfg.printer.max_z_velocity|float %}
  {% set max_a = cfg.printer.max_z_accel|float %}
  {% set min_z = cfg.stepper_z.position_min|float %}
  {% set max_z = cfg.stepper_z.position_max|float %}
  {% set x_center = (th.axis_minimum.x|float + th.axis_maximum.x|float ) / 2 %}
  {% set y_center = (th.axis_minimum.y|float + th.axis_maximum.y|float ) / 2 %}
  {% set iter = params.ITERATIONS|default(iterations) %}

  SAVE_GCODE_STATE NAME=TEST_SPEED_Z
  M118 configured Z speed:{max_v} accel: {max_a}

  {% if not printer.quad_gantry_level.applied %}
    QUAD_GANTRY_LEVEL
  {% endif %}

  G90
  G28 Z
  M400
  GET_POSITION
  G0 X{x_center} Y{y_center} Z{min_z + margin} F600
  {% for i in range(iter) %}
    M400
    M117 Iteration {i+1}/{iter}
    G0 Z{max_z - margin} F{max_v * 60}
    G0 Z{min_z + margin} F{max_v * 60}
  {% endfor %}

  G28 Z
  M400
  GET_POSITION
  
	RESTORE_GCODE_STATE NAME=TEST_SPEED_Z

#[endstop_phase]
[gcode_macro endstop_phase_check]
gcode:
  {% set th = printer.toolhead %}
  {% set axismin = th.axis_minimum %}
  {% set axismax = th.axis_maximum %}
  {% set x_center = (th.axis_minimum.x|float + th.axis_maximum.x|float ) / 2 %}
  {% set y_center = (th.axis_minimum.y|float + th.axis_maximum.y|float ) / 2 %}

  {% if not printer.quad_gantry_level.applied %}
    QUAD_GANTRY_LEVEL
  {% endif %}

  G90
  G28 
  ENDSTOP_PHASE_CALIBRATE

  G0 X{axismin[0]} Y{axismin[1]}
  G28 
  ENDSTOP_PHASE_CALIBRATE
  
  G0 X{axismin[0]} Y{axismax[1]}
  G28 
  ENDSTOP_PHASE_CALIBRATE

  G0 X{axismax[0]} Y{axismax[1]}
  G28 
  ENDSTOP_PHASE_CALIBRATE
  
  G0 X{axismax[0]} Y{axismin[1]}
  G28 
  ENDSTOP_PHASE_CALIBRATE

[gcode_shell_command update_mcu]
command: echo update mcu
timeout: 2.
verbose: True

[gcode_macro UPDATE_MCU]
gcode: 
    RUN_SHELL_COMMAND CMD=update_mcu


######################################################################
# Override M117 command with rawparams
######################################################################

# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`

[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}

#################################################Spoolman####################################

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}



