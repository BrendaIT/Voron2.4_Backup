[fan_generic filter]
pin: PD15
max_power: 1.0
shutdown_speed: 0.0
cycle_time: 0.20  #0.010  #5.0
#hardware_pwm: true
kick_start_time: 0.100  #0.100  #0.01 #0.0001
off_below: 0.10 #0.25
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#   See the "fan" section for a description of the above parameters.
##---------------------------------------------
#[temperature_sensor exutruder]
#sensor_type: temperature_driver
#sensor_driver: tmc2240 extruder

#[temperature_sensor stepper_extruder]
#sensor_type: temperature_driver
#sensor_driver: tmc2240 stepper_extruder

#[fan_generic sht42]
#pin: PD14
#max_power: 1.0
#shutdown_speed: 0.0
#cycle_time: 0.01  #5.0
#hardware_pwm: true
#kick_start_time: 0  #0.01 #0.0001
#off_below: 0.25
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#   See the "fan" section for a description of the above parameters.

#[fan_generic 4W_FAN0]
#pin: EBBCan: PB14
#tachometer_pin: EBBCan: PB15
#tachometer_ppr: 1

[controller_fan ebb2240]
pin: PE5
max_power: 1.0
shutdown_speed: 1.0
kick_start_time: 0.5
heater: heater_bed, extruder
fan_speed: 1.00

#[temperature_fan EBBCan]
#pin: PE5  #PA0
###enable_pin: EBBCan: PB14
#max_power: 1.0
#shutdown_speed: 0.0  #0.9
#cycle_time: 0.0001  #0.0001     #10 kHz PWM signal #0.0005     #2 kHz PWM signal
#hardware_pwm: False
#kick_start_time: 0.5  #0.01
#max_speed: 1.0
#min_speed: 0.0  #.0
##fan_speed: 0.9
#tachometer_pin: ^EBBCan: PB15
#tachometer_ppr: 2
##cycle_time: 0.01  #0.01
##off_below: 0.25  #0.15
#sensor_type: temperature_mcu
#sensor_mcu: EBBCan
##sensor_pin: PF4 # TH0 socket, Z board
#min_temp: 0
#max_temp: 100 #80
#target_temp: 40.0
#hardware_pwm: True
#control: pid
#pid_kp: 40.0
#pid_ki: 5.0
#pid_kd: 0.01
#gcode_id: ebb

#[temperature_fan EBBCan]
#pin: EBBCan: PB14 # Bed Heater terminals, XYE board
#max_power: 1.0
#max_speed: 1.0
#min_speed: 0
#shutdown_speed: 0  #0.3  #0.9  #
#kick_start_time: 0.1  #5.0  #0.100   #0.5 #
#cycle_time: 0.015  #0.07  #0.01  #
#off_below: 0.30 #0.25  #0.15
#sensor_type: temperature_mcu
#sensor_mcu: EBBCan
#min_temp: 0
#max_temp: 70
#target_temp: 50.0
#control: pid
#hardware_pwm: False #true
#tachometer_pin: ^EBBCan: PB15
#tachometer_ppr: 2
#pid_kp: 40.0
#pid_ki: 5.0
#pid_kd: 0.01
#gcode_id: F

#[temperature_sensor FLY-SHT42]
#sensor_type: temperature_mcu
#sensor_mcu: sht42

##---------------------------------------------

#[heater_fan hotend_fan]
##	Hotend Fan - XYE board, HE1 Connector
#pin: EBBCan: PA1
#tachometer_pin: ^EBBCan: PB15
#tachometer_ppr: 2
#tachometer_poll_interval: 0.00015  # 0.0022 #0.0022  #0.0015
#tachometer_poll_interval: 0.0015
#max_power: 1.0
#kick_start_time: 0.5
#heater: extruder
#heater_temp: 50.0
##	If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[heater_fan hotend_fan]
pin: EBBCan: PA0
tachometer_pin: ^EBBCan: PB15
tachometer_ppr: 2
tachometer_poll_interval: 0.0015
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

# Author: alch3my#9819
# Requires a 3-wire fan with tachometer_pin defined. https://www.klipper3d.org/Config_Reference.html#heater_fan
# The tach wire can be connected to a spare endstop pin. 
# Don't forget a pullup (^) on the tach pin (example: tachometer_pin: ^P1.29)

# Monitoring loop. Begins at Klipper start.
#[delayed_gcode CHECK_ALL_FANS]
#initial_duration: 1
#gcode:
#    HOTEND_FAN_CHECK
#    UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=3

# Change min_rpm and max_consecutive_stops to your desired values.
#[gcode_macro HOTEND_FAN_CHECK]
#variable_he_stop_count: 0
#gcode:
#    {% set min_rpm = 3000|float %}
#    {% set max_consecutive_stops = 3 %}
#    {% set rpm = printer['heater_fan hotend_fan'].rpm|float %}
#    {% set he_target = printer[printer.toolhead.extruder].target|float %}
#    {% set he_temp = printer[printer.toolhead.extruder].temperature|float %}
#    {% set fan_on_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp|float %}
#    {% set he_stop_count = printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int %}

#    {% if (he_target >= fan_on_temp) and (rpm < min_rpm) and (he_temp >= fan_on_temp) %}
#        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE={he_stop_count + 1}
#        M118 WARNING: Fan stoppage detected ({he_stop_count+1}/{max_consecutive_stops}).
#        M400
#        {% if printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int >= max_consecutive_stops-1 %}
#            FAN_STOPPAGE_ROUTINE
#        {% endif %}
#    {% else %}
#        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE=0
#    {% endif %}

# Insert the gcode that you want to run when a fan stoppage is detected.
# This runs every ~3 seconds until the stop conditions are cleared.
#[gcode_macro FAN_STOPPAGE_ROUTINE]
#gcode:
#    # If not already paused
#    {% if printer['pause_resume'].is_paused|int == 0 %}
#        M117 !!FAN STOPPAGE!!
#        M118 FAN STOPPAGE DETECTED. PAUSING...
#        PAUSE
#        # Turn off the hotend. 
        # !! Don't forget to turn your hotend back on before resume. !!
        # -- If using this guide's pause/resume macros (in useful_macros.html), the hotend will automatically reheat on resume
        # -- (as long as the hotend is not turned off BEFORE pause is called)
#        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
#    {% endif %}

#-------------------------------------------

[fan]
##	Print Cooling Fan - XYE board, Fan Pin
pin: EBBCan: PA1
kick_start_time: 0.5
off_below: 0.10
#enable_pin: EBBCan: PB14
#tachometer_pin: ^EBBCan: PB15
#tachometer_ppr: 1
#tachometer_ppr: 2
#tachometer_poll_interval: 0.00015  # 0.0022 #0.0022  #0.0015
#tachometer_poll_interval: 0.0015
#hardware_pwm: True
##cycle_time: 0.00004 # 25 kHz
#cycle_time: 0.001
#kick_start_time: 0.2  #0.5
##	Depending on your fan, you may need to increase this value
##	if your fan will not start. Can change cycle_time (increase)
##	if your fan is not able to slow down effectively
#off_below: 0.3  #0 #0.10
#----------------------------------------

#[heater_fan controller_fan] disativato 29-05-24
##	Controller fan - Z board, HE1 Connector
#pin: PD12
#kick_start_time: 0.5
#heater: heater_bed
#heater_temp: 45.0
#fan_speed: 1.0

#[heater_fan tmc_fan]
[controller_fan tmc_fan]
##acende le ventole dell eletronica quando gli motori sono ativati
pin: PA8
kick_start_time: 0.5
#max_power: 1.0
#off_below: 0.10
#heater: heater_bed, extruder
#heater_temp: 45.0
fan_speed: 0.75
stepper: stepper_x, stepper_y, stepper_z

[heater_fan controller_fan]
#[controller_fan controller_fan]
##acende le ventole dell eletronica quando gli motori sono ativati
pin: PD12
kick_start_time: 0.5
#max_power: 1.0
#off_below: 0.10
heater: heater_bed   #extruder
heater_temp: 45.0
fan_speed: 1.0
#stepper: stepper_x, stepper_y, stepper_z
##---------------------------------------
#[duplicate_pin_override]
#pins: PF4

#[temperature_fan chamber]
##    Exhaust fan - Z board, HE0 Connector
#pin: PD13
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 0.1
##cycle_time: 0.000005 
#gcode_id: CB
#off_below: 0.25
##shutdown_speed: 0.0
#sensor_type: Generic 3950  ##NTC 100K beta 3950 #Generic 3950
#sensor_pin: PF4
#min_temp: 0
#max_temp: 100
##max_power: 1.0
#min_speed: 0.0
#target_temp: 40
#control = pid
##max_delta: 2.0
#pid_kp = 20
#pid_ki = 2
#pid_kd = 0.1

[temperature_sensor E_MOTOR]
sensor_type: Generic 3950
sensor_pin: EBBCan: PA2

[temperature_fan chamber]
pin: PD13 # Bed Heater terminals, XYE board
max_power: 1.0
max_speed: 1.0
min_speed: 0
shutdown_speed: 0  #0.3  #0.9  #
kick_start_time: 1.0  #5.0  #0.100   #0.5 #
cycle_time: 0.015  #0.07  #0.01  #
off_below: 0.30 #0.25  #0.15
sensor_type: Generic 3950
sensor_pin: PF4 # TH0 socket, Z board
min_temp: 0
max_temp: 70
target_temp: 40.0
#control: watermark
control: pid
hardware_pwm: False #true
pid_kp: 40.0
pid_ki: 5.0
pid_kd: 0.01
gcode_id: C

#off_below: 0.25
#cycle_time: 0.7

[gcode_macro M141]
description: Set the chamber target temperature.
gcode:
    {% set TargetTemperature = params.S | default(0) | int %}
    {% set ChamberIndex = params.P | default(0) | int %}
    {% set HeaterNumber = params.H | default(0) | int %}
    {% set ToolNumber   = params.T | default(0) | int %}
    {% set StandbyTemperature = params.R | default(0) | int %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={TargetTemperature}


[temperature_sensor chamber]
sensor_type: Generic 3950  #Generic 3950 ##NTC 100K beta 3950
sensor_pin: PF5
min_temp: 0
max_temp: 100
gcode_id: A

#[gcode_macro M141]
#description: Set temperature of chamber fan
#gcode:
#  # set default parameter value
#	{% set temp = params.S|default(0) %}
#	SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target={temp}

#------------------------------------

#[thermistor ntc_50k]
#temperature1: 25
#resistance1: 50000
#temperature2: 65
#resistance2: 10095
#temperature3: 100
#resistance3: 3090

#[temperature_sensor frame] inserito in setion framespanzione
#sensor_type: Generic 3950  #Generic 3950 ##NTC 100K beta 3950
#sensor_pin: PF6
#min_temp: 0
#max_temp: 100
#gcode_id: FX


[temperature_sensor heater_bed_corner]
sensor_type: Generic 3950
sensor_pin: PF7
min_temp: 10
max_temp: 120

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

#[temperature_sensor motor_e]
#sensor_pin: sht42:PB0
#sensor_type: Generic 3950
#pullup_resistor: 2200
#min_temp: 0
#max_temp: 100

[temperature_sensor RPi_Temp]
sensor_type: temperature_host
min_temp: 10  #-100
max_temp: 100  #900

[temperature_sensor EBBCan]
sensor_type: temperature_mcu
sensor_mcu: EBBCan
min_temp: 0
max_temp: 100

[temperature_sensor MMU_Temp]
sensor_type: temperature_mcu
sensor_mcu: mmu
min_temp: 0
max_temp: 100
#-------------------------------------



######################### CHAMBER TEMP WAIT #########################

# Wait for chamber temp, kick off wait loop if not already at temp
# !! I created this before temperature_wait existed. The only reason I still ise it is because it's cancelable.
# !! I honestly would not recommend using this, it's really junky,
# !! It pauses the print (if not at temp) during print_start, pausing CANNOT happen (properly at least) in the middle of a macro, so it requires PRINT_START being split into two parts. 
# !! There may be a more graceful way to fix this but I can't be bothered. "There is nothing more permanent than a temporary solution"

[gcode_macro M191]
variable_chambertargettemp: 0
gcode:
	# Parameters
	{% set s = params.S|default(1)|float %}
	
	SET_GCODE_VARIABLE MACRO=M191 VARIABLE=chambertargettemp VALUE={s}		   							; set target temp for reference outside of the macro (for the loop)
						
	{% if not printer["temperature_sensor chamber"].temperature >= s|float %}						; ##IF CHAMBER TEMP IS NOT ALREADY REACHED##
		{ action_respond_info("Chamber not at temp yet, pausing...") }					
			{% if not printer.pause_resume.is_paused %}					
				BASE_PAUSE														   							; pause if not already paused
			{% endif %}					
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=5						   							; start wait loop
	{% else %}					
		{ action_respond_info("Chamber at or above temp, continuing...") }     							; ##IF CHAMBER TEMP IS ALREADY REACHED##
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0                           							; break wait loop if it happens to be running already (shouldn't be)
		{% if printer.pause_resume.is_paused %}					
			BASE_RESUME															   							; resume if paused (shouldn't be)
		{% endif %}					
		PRINT_START2													   								; run part 2 of PRINT_START
	{% endif %}
	
# This part will loop until the desired chamber temp is reached, then resume the print
[delayed_gcode M191-WAIT]
gcode:
	{% if printer["temperature_sensor chamber"].temperature >= printer["gcode_macro M191"].chambertargettemp|float %} ; ##IF CHAMBER TEMP IS REACHED##
		{ action_respond_info("Chamber at or above temp, continuing...") }
			{% if printer.pause_resume.is_paused %}
				BASE_RESUME														   											 ; break loop, resume print
				PRINT_START2											   												 ; run part 2 of PRINT_START
			{% endif %}
	{% else %}																											 ; ##IF CHAMBER TEMP IS NOT YET REACHED##
		{ action_respond_info("Chamber not at temp yet, waiting...") }
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=5						   											 ; continue waiting loop
	{% endif %}

[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(110)|int %}
	{% set move = params.MOVE|default(1)|int %}

	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
	#SET_FAN_SPEED FAN=Exhaust SPEED=0
	SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber TARGET=0		 		; turn off exhaust fan
	M140 S{t}										; heat bed
	{% if t >= 100 %}
		M104 S180									; set hotend to no-ooze temp
		M106 S205 									; turn on part fan (80%)
	{% else %}
		M106 S0 									; turn part fan off
	{% endif %}
	{% if move == 1 %}
		CG28										; conditional home
		PARKCENTER						 			; move to bed
	{% endif %}


[delayed_gcode DELAYED_OFF]
gcode:
	OFF  			#call "OFF" macro, to turn off everything (heaters, motors, lights, fans)

[gcode_macro EXAUSTOR_ON]
gcode:
    #SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber_temperature target=10 max_speed=1.0
	SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber TARGET=20 max_speed=1.0

[gcode_macro EXAUSTOR_OFF]
gcode:
    #SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber_temperature target=60 max_speed=1.0
	SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber TARGET=0 max_speed=0.0
##------------------------------------------------

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

#[gcode_macro M106] #OrcaSlicer abilitare controllo fan scarico
#gcode:
#    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
#    {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
#    SET_FAN_SPEED FAN={fan} SPEED={speed}
