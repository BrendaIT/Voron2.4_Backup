######################### PRINT START / END #########################
[gcode_macro PRINT_START]
#variable_filament: "ABS"
gcode:
    #{% set BED_TEMP = params.BED_TEMP|default(60)|float %}    #Orca Slicer
    #{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}   #Orca Slicer
    {% set EXTRUDER = params.EXTRUDER|int %}   #SSlicer
    {% set BED = params.BED|int %}             #SSlicer
    {% set ChamberTemperature = params.CHAMBER_TEMPERATURE | default(40) | int %}
#    {% set MATERIAL = params.MATERIAL|default('ABS')|string %}
#    SAVE_VARIABLE VARIABLE=last_material VALUE="'{MATERIAL}'"
#    SET_MATERIAL MATERIAL={MATERIAL}     
    
    PRINTER_STATE_PREHEAT
    BED_MESH_CLEAR
    SET_FILAMENT_SENSOR SENSOR=btt_sensor ENABLE=0
    CLEAR_PAUSE
    ERCF_DISABLE
#    KINEMATICS_SAFE_DEFAULTS
    SET_VELOCITY_LIMIT ACCEL=1000
    SET_VELOCITY_LIMIT VELOCITY=100
    G21
    G90
    M83
    SET_Z_THERMAL_ADJUST ENABLE=0
    G28
    G0  X175 Y 175 Z25 F4000
    M106 S255
    STATUS_HEATING
    SET_FAN_SPEED FAN=Nevermore SPEED=1
    M104 S{(EXTRUDER|float * 0.5)|round}  #scalda lextrusore al 50x100#  #SSlicer
    M190 S{BED}       #SSlicer
    #M104 S{EXTRUDER_TEMP * 0.7} T0    #Orca Slicer
    #M140 S{BED_TEMP}    #Orca Slicer
    
    #G4 P300000
 #   M141 S{ChamberTemperature} ; set target chamber temperature
    #M141 S{CHAMBER}
#    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER_TEMP}
    # Wait for bed corner to reach 80% of temperature
    #TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=40
    TEMPERATURE_WAIT SENSOR="temperature_sensor heater_bed_corner" MINIMUM={(BED|float * 0.70)|round}  #SSlicer
    #TEMPERATURE_WAIT SENSOR="temperature_sensor heater_bed_corner" MINIMUM={(BED_TEMP|float * 0.70)|round}
    M107
#    clean_nozzle
    G28 Z
#    clean_nozzle
    #mesh#
    G32
    BED_MESH_CALIBRATE ADAPTIVE=1
    BED_MESH_PROFILE LOAD=default
    #
    #G32
    # Adjust the G-Code Z offset if needed
    #G28 Z
#    CALIBRATE_Z
#    SET_GCODE_OFFSET Z_ADJUST={params.Z_ADJUST|default(0.0)|float} MOVE=1
#    SET_PRESSURE_ADVANCE ADVANCE=0.050 #PLA 0.050 #ABS 0.040
    SET_PIN PIN=caselight VALUE=0.9
    SET_FAN_SPEED FAN=filter SPEED=1
#    ERCF_OFF
    SET_Z_THERMAL_ADJUST ENABLE=1
#    RESETCURRENT
    RESETSPEEDS
#    G1 X3.1 Y20 Z1 F3000.0  # Move to start position
    G1 X20.0 Y25 Z1 F3000.0  # Move to start position setup ERCF Filametrix
##    M109 S250
    M109 S{EXTRUDER}  #SSlicer
   #M109 S{EXTRUDER_TEMP} T0   #Orca Slicer
#    SET_MATERIAL MATERIAL={MATERIAL}
#    SET_MATERIAL
    PRIME_LINE
#    M300 S1200 P100
#    M300 S1200 P120
#    G92 E0   #Reset Extruder
#    G1 Z2.0 F3000    #Move Z Axis up
#    G1 X20 Y30 Z0.28 F5000.0   #Move to start position
#    G1 X20 Y200.0 Z0.28 F1500.0 E15   #Draw the first line
#    G1 X22 Y200.0 Z0.28 F5000.0   #Move to side a little
#    G1 X22 Y50 Z0.28 F1500.0 E30   #Draw the second line
#    G92 E0   #Reset Extruder
#    G1 Z2.0 F3000   #Move Z Axis up
    SKEW_PROFILE LOAD=skew_profile_1
    SET_FILAMENT_SENSOR SENSOR=btt_sensor ENABLE=1
    M141 S{ChamberTemperature} ; set target chamber temperature
    #PRINTER_STATE_PRINTING
    STATUS_PRINTING
    M117 Printing

    

[gcode_macro PRINT_END]
gcode:
#    # safe anti-stringing move coords
#    {% set unload = params.UNLOAD_AT_END|default(0)|int %}     ##ERCF
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
#    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0  #ERCF
    PRINTER_STATE_SUCCESS
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F1800                 ; retract filament

#    {% if unload|int == 1%}       ##ERCF
#      ERCF_EJECT                  ##ERCF
#    {% endif %}                   ##ERCF
    
    
    TURN_OFF_HEATERS
    M106 S255                          #turn oN fan
    exaustor_on
   
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M84
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=50 MAXIMUM=55
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    SET_SKEW CLEAR=1
    SET_PIN PIN=caselight VALUE=0.0
    SET_FAN_SPEED FAN=filter SPEED=0
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=180
    SET_FAN_SPEED FAN=Nevermore SPEED=0
    RESETSPEEDS
    CLEAR_PAUSE
    SET_Z_THERMAL_ADJUST ENABLE=0
    EXAUSTOR_OFF
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    POWER_OFF_PRINTER
    #M81
    


#[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
#gcode:
#    # safe anti-stringing move coords
#    {% set th = printer.toolhead %}
#    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
#    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
#    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
#    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
#    M400                           ; wait for buffer to clear
#    G92 E0                         ; zero the extruder
#    G1 E-5.0 F1800                 ; retract filament
    
#    TURN_OFF_HEATERS
#   
#    G90                                      ; absolute positioning
#    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
#    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
#    M107                                     ; turn off fan
    
#    BED_MESH_CLEAR
#    RESTORE_GCODE_STATE NAME=STATE_PRINT_END


[gcode_macro PRINT_START_ERCF]
#variable_filament: "ABS"
#variable_material: "XXX"
description: Called when starting print
gcode:
    {% set EXTRUDER = params.EXTRUDER|int %}
    {% set BED = params.BED|int %}
    {% set ChamberTemperature = params.CHAMBER_TEMPERATURE | default(40) | int %}
#    {% set MATERIAL = params.MATERIAL|default('ABS')|string %}
#    SAVE_VARIABLE VARIABLE=last_material VALUE="'{MATERIAL}'"
#    SET_MATERIAL MATERIAL={MATERIAL}

    ERCF_ENABLE
    {% set REFERENCED_TOOLS = params.REFERENCED_TOOLS|default("")|string %}
    {% set INITIAL_TOOL = params.INITIAL_TOOL|default(0)|int %}

    {% if REFERENCED_TOOLS == "!referenced_tools!" %}
        RESPOND MSG="Happy Hare gcode pre-processor is diabled"
        {% set REFERENCED_TOOLS = INITIAL_TOOL %}
    {% elif REFERENCED_TOOLS == "" %}
        RESPOND MSG="Happy Hare single color print"
        {% set REFERENCED_TOOLS = INITIAL_TOOL %}
    {% endif %}

    ; other logic..

    MMU_CHECK_GATE TOOLS={REFERENCED_TOOLS}

    ; other logic..

    MMU_CHANGE_TOOL STANDALONE=1 TOOL={INITIAL_TOOL}    # Optional: load initial tool
#    {% set EXTRUDER = params.EXTRUDER|int %}
#    {% set BED = params.BED|int %}
#    {% set ChamberTemperature = params.CHAMBER_TEMPERATURE | default(40) | int %}
#    {% set MATERIAL = params.MATERIAL|default('PLA')|string %}
#    {% set MATERIAL = params.MATERIAL|default(printer["gcode_macro _USER_VARIABLES"].print_default_material)|string %}
#    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=material VALUE='"{MATERIAL}"'
#    SAVE_VARIABLE VARIABLE=last_material VALUE="'{MATERIAL}'"
#    SET_MATERIAL MATERIAL={MATERIAL}
#    PRINTER_STATE_PREHEAT
#    _MMU_PRINT_START
    BED_MESH_CLEAR
#    SET_GCODE_VARIABLE MACRO=hotend_cooling VARIABLE=druck_aktiv VALUE=1
    SET_FILAMENT_SENSOR SENSOR=btt_sensor ENABLE=0
    CLEAR_PAUSE
#    ERCF_ENABLE
    KINEMATICS_SAFE_DEFAULTS
#    SET_VELOCITY_LIMIT ACCEL=1000 ACCEL_TO_DECEL=500
#    SET_VELOCITY_LIMIT VELOCITY=100
    G21
    G90
    M83
    SET_Z_THERMAL_ADJUST ENABLE=0
    G28
    G0  X175 Y 175 Z25 F4000
    M106 S255
    STATUS_HEATING
    M104 S{(EXTRUDER|float * 0.5)|round}  #scalda lextrusore al 50x100#
    M190 S{BED}
    #G4 P300000
 #   M141 S{ChamberTemperature} ; set target chamber temperature
    #M141 S{CHAMBER}
#    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER_TEMP}
    # Wait for bed corner to reach 80% of temperature
    #TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=40
    TEMPERATURE_WAIT SENSOR="temperature_sensor heater_bed_corner" MINIMUM={(BED|float * 0.70)|round}
    M107
    #clean_nozzle
    G28 Z
    #clean_nozzle
    #mesh#
    G32
    BED_MESH_CALIBRATE ADAPTIVE=1
    BED_MESH_PROFILE LOAD=default
    #
    #G32
    # Adjust the G-Code Z offset if needed
    #G28 Z
#    CALIBRATE_Z
#    SET_GCODE_OFFSET Z_ADJUST={params.Z_ADJUST|default(0.0)|float} MOVE=1
#    SET_PRESSURE_ADVANCE ADVANCE=0.050 #PLA 0.050 #ABS 0.040
    SET_PIN PIN=caselight VALUE=0.9
    SET_FAN_SPEED FAN=filter SPEED=1
#    ERCF_OFF
    SET_Z_THERMAL_ADJUST ENABLE=1
#    RESETCURRENT
    RESETSPEEDS
#    G1 X3.1 Y20 Z1 F3000.0  # Move to start position
    G1 X20.0 Y25 Z1 F3000.0  # Move to start position setup ERCF Filametrix
##    M109 S250
    M109 S{EXTRUDER}
#    SET_MATERIAL MATERIAL={MATERIAL}
#    SET_MATERIAL
    MMU_CHECK_GATES TOOLS={TOOLS_USED}
#    PRIME_LINE             #test tolto 17-06-24
#    M300 S1200 P100
#    M300 S1200 P120
#    G92 E0   #Reset Extruder
#    G1 Z2.0 F3000    #Move Z Axis up
#    G1 X20 Y30 Z0.28 F5000.0   #Move to start position
#    G1 X20 Y200.0 Z0.28 F1500.0 E15   #Draw the first line
#    G1 X22 Y200.0 Z0.28 F5000.0   #Move to side a little
#    G1 X22 Y50 Z0.28 F1500.0 E30   #Draw the second line
#    G92 E0   #Reset Extruder
#    G1 Z2.0 F3000   #Move Z Axis up
    SKEW_PROFILE LOAD=skew_profile_1
    SET_FILAMENT_SENSOR SENSOR=btt_sensor ENABLE=0
    M141 S{ChamberTemperature} ; set target chamber temperature
    #PRINTER_STATE_PRINTING
    #SET_MATERIAL
    STATUS_PRINTING
    M117 Printing

[gcode_macro PRINT_END_ERCF]
gcode:
    # safe anti-stringing move coords
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}     ##ERCF
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END_ERCF
#    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0  #ERCF
    PRINTER_STATE_SUCCESS
#    _MMU_PRINT_END
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F1800                 ; retract filament

    {% if unload|int == 1%}       ##ERCF
      ERCF_EJECT                  ##ERCF
    {% endif %}                   ##ERCF
    
    
    TURN_OFF_HEATERS
    M106 S255                          #turn oN fan
    exaustor_on
   
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M84
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=50 MAXIMUM=55
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    SET_SKEW CLEAR=1
    SET_PIN PIN=caselight VALUE=0.0
    SET_FAN_SPEED FAN=filter SPEED=0
    SET_GCODE_VARIABLE MACRO=hotend_cooling VARIABLE=druck_aktiv VALUE=0
    RESETSPEEDS
    CLEAR_PAUSE
    SET_Z_THERMAL_ADJUST ENABLE=0
    EXAUSTOR_OFF
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END_ERCF
    #POWER_OFF_PRINTER
    #M81





[gcode_macro _PURGE_LINE]
gcode:
    {% set START_X = params.START_X|default(10)|float %}
    {% set START_Y = params.START_Y|default(5)|float|default(5)|float %}
    {% set LENGTH = params.LENGTH|default(120)|float %}
    {% set DIRECTION = params.DIRECTION|default("X") %}
    {% set PURGE = params.PURGE|default(40)|float %}

    G92 E0;
    G90
    G0 X{START_X} Y{START_Y} F18000
    G0 Z0.4
    G91
    G1 {DIRECTION}{LENGTH} E{PURGE/2} F2200;
    G1 X1 Y1
    G1 {DIRECTION}-{LENGTH-1} E{PURGE/2} F1400;
    G1 Z3 E-0.75 F1800
    G1 E0.75 F1800
    G90
    G92 E0;

[gcode_macro PRIME_LINE]
gcode: |
    {% set X = params.X|default(20)|float %} ; X-axis start position
    {% set Y = params.Y|default(25)|float %} ; Y-axis start position
    {% set AXIS = params.AXIS|default("X")|string|lower %} ; axis direction for prime line
    {% set PARK_SPEED = params.PARK_SPEED|default(300)|int %}
    {% set LAYER_HEIGHT = params.LAYER_HEIGHT|default(0.2)|float %} ; prime line layer height
    {% set LENGTH = params.LENGTH|default(100)|float %} ; line length in mm
    {% set WIDTH = params.WIDTH|default(1.6)|float %} ; line width in mm
    {% set FILAMENT_WIDTH = params.FILAMENT_WIDTH|default(1.75)|float %} ; filament diameter in mm
    {% set SPEED = params.SPEED|default(16)|int %} ; line speed in mm/s
    {% set RETRACTION_LENGTH = params.RETRACTION_LENGTH|default(0.5)|float %} ; mm retraction after line printed
    {% set RETRACTION_SPEED = params.RETRACTION_SPEED|default(30)|int %} ; mm/s retraction speed after line printed
    {% set Z_LIFT = params.Z_LIFT|default(10)|float %} ; z lift after primed line
    {% set WIPE_LENGTH = params.WIPE_LENGTH|default(2)|float %} ; wipe after intro line
    {% set RESTORE = params.RESTORE|default(1)|int %} ; restore initial position after prime line 

    SAVE_GCODE_STATE NAME=prime_line_state

    M117 Intro line..
    G1 X{X} Y{Y} Z{LAYER_HEIGHT} F{(PARK_SPEED * 60)}; park
    G91
    G92 E0.0
    {% set FIRST_LENGTH = (LENGTH * 0.65)|round(2)|float %}
    {% set SECOND_LENGTH = (LENGTH - FIRST_LENGTH|float)|round(2)|float %}

    {% set filament_rate = WIDTH * LAYER_HEIGHT %}

    G1 {AXIS|upper}{FIRST_LENGTH} E{ ((filament_rate * FIRST_LENGTH)/FILAMENT_WIDTH) } F{(60*SPEED)} ; intro line
    G1 {AXIS|upper}{SECOND_LENGTH} E{ 1.25 * ((filament_rate * SECOND_LENGTH)/FILAMENT_WIDTH)|round(3) } F{(60*SPEED)} ; intro line

    {% if WIPE_LENGTH|int != 0 %}
        G1 {AXIS|upper}{WIPE_LENGTH} F{(60*SPEED)}
    {% endif %}

    {% if RETRACTION_LENGTH != 0 %}
        G92 E0.0
        G1 E{ (-1 * RETRACTION_LENGTH)} F{60 * RETRACTION_SPEED}
    {% endif %}

    {% if Z_LIFT > 0 %}
        G1 Z{Z_LIFT} F{(30*60)}
    {% endif %}

    CLEAR_SCREEN
	M400

    RESTORE_GCODE_STATE NAME=prime_line_state MOVE={RESTORE} MOVE_SPEED={PARK_SPEED}

#---------------------------------------- 
